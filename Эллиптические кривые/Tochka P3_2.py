def vzlom(A, B):
    –í–µ—Ä—Ö–Ω—è—è_—Å—Ç—Ä–æ–∫–∞ = [1, 0, A]
    –ù–∏–∂–Ω—è—è_—Å—Ç—Ä–æ–∫–∞ = [0, 1, B]
    print (f'\t{–í–µ—Ä—Ö–Ω—è—è_—Å—Ç—Ä–æ–∫–∞}')
    print (f'\t{–ù–∏–∂–Ω—è—è_—Å—Ç—Ä–æ–∫–∞}')
    
    while True:
        if (–í–µ—Ä—Ö–Ω—è—è_—Å—Ç—Ä–æ–∫–∞[2] == 1 and –ù–∏–∂–Ω—è—è_—Å—Ç—Ä–æ–∫–∞[2] == 0) or (–í–µ—Ä—Ö–Ω—è—è_—Å—Ç—Ä–æ–∫–∞[2] == 0 and –ù–∏–∂–Ω—è—è_—Å—Ç—Ä–æ–∫–∞[2] == 1):
            break            
        elif –í–µ—Ä—Ö–Ω—è—è_—Å—Ç—Ä–æ–∫–∞[2] < –ù–∏–∂–Ω—è—è_—Å—Ç—Ä–æ–∫–∞[2]:
            –º–Ω–æ–∂–∏—Ç–µ–ª—å = –ù–∏–∂–Ω—è—è_—Å—Ç—Ä–æ–∫–∞[2] // –í–µ—Ä—Ö–Ω—è—è_—Å—Ç—Ä–æ–∫–∞[2]
            for i in range (0, 3):
                –ù–∏–∂–Ω—è—è_—Å—Ç—Ä–æ–∫–∞[i] -= (–í–µ—Ä—Ö–Ω—è—è_—Å—Ç—Ä–æ–∫–∞[i]*–º–Ω–æ–∂–∏—Ç–µ–ª—å)
        else:
            –º–Ω–æ–∂–∏—Ç–µ–ª—å = –í–µ—Ä—Ö–Ω—è—è_—Å—Ç—Ä–æ–∫–∞[2] // –ù–∏–∂–Ω—è—è_—Å—Ç—Ä–æ–∫–∞[2]
            for i in range (0, 3):
                –í–µ—Ä—Ö–Ω—è—è_—Å—Ç—Ä–æ–∫–∞[i] -= (–ù–∏–∂–Ω—è—è_—Å—Ç—Ä–æ–∫–∞[i]*–º–Ω–æ–∂–∏—Ç–µ–ª—å)
        print ("")
        print (f'\t{–í–µ—Ä—Ö–Ω—è—è_—Å—Ç—Ä–æ–∫–∞}')
        print (f'\t{–ù–∏–∂–Ω—è—è_—Å—Ç—Ä–æ–∫–∞}')
    if –í–µ—Ä—Ö–Ω—è—è_—Å—Ç—Ä–æ–∫–∞[2] == 1:
        if –í–µ—Ä—Ö–Ω—è—è_—Å—Ç—Ä–æ–∫–∞[0] > 0:
            return –í–µ—Ä—Ö–Ω—è—è_—Å—Ç—Ä–æ–∫–∞[0]
        else:
            itog = –í–µ—Ä—Ö–Ω—è—è_—Å—Ç—Ä–æ–∫–∞[0]
            while itog < 0:
                itog += –ù–∏–∂–Ω—è—è_—Å—Ç—Ä–æ–∫–∞[0]
                print(f'\t–ö –≤–µ—Ä—Ö–Ω–µ–π –ø—Ä–∏–±–∞–≤–∏—Ç—å –Ω–∏–∂–Ω—é—é, —á—Ç–æ–±—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ')
            return itog    
            
    elif –ù–∏–∂–Ω—è—è_—Å—Ç—Ä–æ–∫–∞[2] == 1:
        if –ù–∏–∂–Ω—è—è_—Å—Ç—Ä–æ–∫–∞[0] > 0:
            return –ù–∏–∂–Ω—è—è_—Å—Ç—Ä–æ–∫–∞[0]
        else:
            itog = –ù–∏–∂–Ω—è—è_—Å—Ç—Ä–æ–∫–∞[0]
            while itog < 0:
                itog += –í–µ—Ä—Ö–Ω—è—è_—Å—Ç—Ä–æ–∫–∞[0]
                print(f'\t–ö –Ω–∏–∂–Ω–µ–π –ø—Ä–∏–±–∞–≤–∏—Ç—å –≤–µ—Ä—Ö–Ω—é—é, —á—Ç–æ–±—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ')
            return itog   

def addsym(arr, n):
    newarr = []
    for i in range(0, len(arr)):
        newarr.append(str(arr[i]))
    newarr = [f'{" " * (n-len(e))}{e}' for e in newarr]
    return newarr

print(f'–≠–ª–ª–∏–ø—Ç–∏—á–µ—Å–∫–∏–µ –∫—Ä–∏–≤—ã–µ, –ø–æ–∏—Å–∫ P3') 
P = int(input('–í–≤–µ–¥–∏—Ç–µ P: '))
a = int(input('–í–≤–µ–¥–∏—Ç–µ a: '))
b = int(input('–í–≤–µ–¥–∏—Ç–µ b: '))
temp = input('–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ –†1: ')
l1, l2 = temp.split()
l1 = int(l1)
l2 = int(l2)
P1 = (l1, l2)
temp = input('–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ –†2: ')
l1, l2 = temp.split()
l1 = int(l1)
l2 = int(l2)
P2 = (l1, l2)
if P1[0] == P2[0]:
    if abs(P1[1] - P) == P2[1]:
        newP1 = (P1[0], P1[1] - P)
        print(f'P1 + P2 = {P1} + {P2} = {newP1} + {P2} = ùüò')
        exit()

Q = []
Y2 = []
X = []
Y = []
print(f'y**2 = x**3 + a*x + b')
f = f'y**2 = x**3 + {a}*x + {b}'
print (f)
print (f'Q(x) = x**3 + {a}*x + {b}')
for w in range (0, P):
    Xi = Yi = w
    Qi = (w**3 + a*w + b) % P
    Y2i = (w**2) % P
    Q.append(Qi)
    Y2.append(Y2i)
    X.append(Xi)
    Y.append(Yi)

kolvosimvolov = len(str(P))
strmassX = addsym(X, kolvosimvolov)
strmassY = addsym(Y, kolvosimvolov)
strmassQ = addsym(Q, kolvosimvolov)
strmassY2 = addsym(Y2, kolvosimvolov)
strQ = '  '.join(strmassQ)
strY2 = '  '.join(strmassY2)
strX = '  '.join(strmassX)
strY = '  '.join(strmassY)
print(f'x  | {strX}\nQ  | {strQ}\ny  | {strY}\ny^2| {strY2}')
massivtochek = []
for t in range(0, P):
    for k in range(0, P):
        if Q[t] == Y2[k]:
            newpoint = (X[t], Y[k])
            massivtochek.append(newpoint)
print(f'–ú–∞—Å—Å–∏–≤ —Ç–æ—á–µ–∫ –∫—Ä–∏–≤–æ–π: ')    
for i in massivtochek:
    print(i)
if P1 in massivtochek and P2 in massivtochek:
    print(f'–£–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ {P1} –∏ {P2} –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ —Ç–æ—á–µ–∫ —ç–ª–ª–∏–ø—Å–∞')
else:
    print(f'–£–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ {P1} –∏ {P2} –ù–ï –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ —Ç–æ—á–µ–∫ —ç–ª–ª–∏–ø—Å–∞, –¥–∞–ª—å–Ω–µ–π—à–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã')
    exit()
print(f'–†–∞—Å—á–µ—Ç P3 = P2 + P1. –í—Å–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–æ –º–æ–¥—É–ª—é p.')
print(f'–†–∞—Å—á–µ—Ç k:')
t2 = (P2[0] - P1[0]) % P
if t2 != 0:
    print(f'k = (y2-y1)/(x2-x1) = (y2-y1) * (x2-x1)**-1\n–†–∞—Å—á—ë—Ç (x2-x1)**-1 mod p')
    #print(f'–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å –±–µ–∑ –º–æ–¥—É–ª—è —Ä–∞–≤–µ–Ω {t2}')
    t2 = vzlom(t2, P) % P
    print(f'(x2-x1)**-1 –ø–æ –º–æ–¥—É–ª—é {P} —Ä–∞–≤–Ω–æ {t2}')
    t1 = (P2[1] - P1[1]) % P
    k = (t1 * t2) % P
    print(f'k = (y2-y1) * (x2-x1)**-1 = {t1} * {t2} mod {P}= {k}')
    #print(f'k = {k}')
else:
    t1 = 3 * (P1[0]**2) + a
    print(f'k = (3 * x1**2 + a) / (2 * y1) = (3 * x1**2 + a) * (2 * y1)**-1\n–†–∞—Å—á—ë—Ç (2 * y1)**-1 mod p')
    t2 = 2 * P1[1]
    t2 = vzlom(t2, P) % P
    print(f'(2 * y1)**-1 –ø–æ –º–æ–¥—É–ª—é {P} —Ä–∞–≤–Ω–æ {t2}')
    k = (t1 * t2) % P
    print(f'k = (3 * x1**2 + a) * (2 * y1)**-1 = {t1} * {t2} mod {P} = {k}')
x3 = (k**2 - P1[0] - P2[0]) % P
print(f'x3 = k**2 - x1 - x2 = {x3}')
y3 = (k * (P1[0] - x3) - P1[1]) % P
print(f'y3 = k*(x1 - x3) - y1 = {y3}')
P3 = (x3, y3) 
print(f'P3 = {P3}')
#ùüò